#include "pch.h"
#include <iostream>
#include <Windows.h>
#pragma warning(disable: 4996)
BYTE x86_Stub[] = { 0x55, 0x89, 0xe5, 0x56, 0x53, 0x83, 0xc4, 0x80, 0xc7, 0x45, 0xac, 0x52, 0x74, 0x6c, 0x44, 0xc7, 0x45, 0xb0, 0x65, 0x63, 0x6f, 0x6d, 0xc7, 0x45, 0xb4, 0x70, 0x72, 0x65, 0x73, 0xc7, 0x45, 0xb8, 0x73, 0x42, 0x75, 0x66, 0xc7, 0x45, 0xbc, 0x66, 0x65, 0x72, 0x00, 0x8d, 0x45, 0xac, 0x89, 0xc1, 0xe8, 0x30, 0x02, 0x00, 0x00, 0x89, 0x45, 0xf4, 0xc7, 0x45, 0xa7, 0x33, 0x30, 0x63, 0x6d, 0xc6, 0x45, 0xab, 0x00, 0x8d, 0x45, 0xa7, 0x89, 0xc1, 0xe8, 0x8b, 0x02, 0x00, 0x00, 0x89, 0x45, 0xf0, 0xc7, 0x45, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xe4, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xe4, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x8b, 0x50, 0x08, 0xc7, 0x45, 0xdc, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xdc, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xd8, 0x8b, 0x40, 0x08, 0x8b, 0x40, 0x3c, 0x01, 0xd0, 0x05, 0xf8, 0x00, 0x00, 0x00, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x08, 0xc7, 0x45, 0xd4, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xd4, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xd0, 0x8b, 0x45, 0xd0, 0x8b, 0x48, 0x08, 0x8b, 0x45, 0xf0, 0x8b, 0x40, 0x0c, 0x01, 0xc8, 0x89, 0xc6, 0x8b, 0x45, 0xec, 0x8b, 0x40, 0x08, 0xc7, 0x45, 0xcc, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0xcc, 0x64, 0x8b, 0x09, 0x89, 0x4d, 0xc8, 0x8b, 0x4d, 0xc8, 0x8b, 0x59, 0x08, 0x8b, 0x4d, 0xec, 0x8b, 0x49, 0x0c, 0x01, 0xd9, 0x89, 0xcb, 0x8d, 0x4d, 0xa0, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x54, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x89, 0x5c, 0x24, 0x04, 0xc7, 0x04, 0x24, 0x02, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf4, 0xff, 0xd0, 0x83, 0xec, 0x18, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x88, 0x45, 0xeb, 0xe8, 0x8a, 0x04, 0x00, 0x00, 0xc7, 0x45, 0xc4, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xc4, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xc0, 0x8b, 0x45, 0xc0, 0x8b, 0x58, 0x08, 0xe8, 0x01, 0x03, 0x00, 0x00, 0x8b, 0x40, 0x78, 0x01, 0xd8, 0xff, 0xd0, 0x90, 0x8d, 0x65, 0xf8, 0x5b, 0x5e, 0x5d, 0xc3, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x08, 0x89, 0x4d, 0xfc, 0x89, 0x55, 0xf8, 0x8b, 0x45, 0xfc, 0x0f, 0xb6, 0x00, 0x84, 0xc0, 0x74, 0x23, 0x8b, 0x45, 0xfc, 0x8d, 0x50, 0x01, 0x89, 0x55, 0xfc, 0x0f, 0xb6, 0x08, 0x8b, 0x45, 0xf8, 0x8d, 0x50, 0x01, 0x89, 0x55, 0xf8, 0x0f, 0xb6, 0x00, 0x38, 0xc1, 0x75, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xeb, 0x05, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x84, 0xc0, 0x74, 0x02, 0xeb, 0xc8, 0x8b, 0x45, 0xf8, 0x0f, 0xb6, 0x00, 0x84, 0xc0, 0x0f, 0x94, 0xc0, 0xc9, 0xc3, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x28, 0x89, 0x4d, 0xdc, 0x89, 0x55, 0xd8, 0x8b, 0x45, 0xdc, 0x8b, 0x40, 0x3c, 0x89, 0xc2, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x78, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x8b, 0x10, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf0, 0x8b, 0x40, 0x20, 0x85, 0xc0, 0x75, 0x0a, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x20, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x24, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x1c, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0x89, 0x45, 0xe4, 0xc7, 0x45, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf0, 0x8b, 0x40, 0x18, 0x39, 0x45, 0xfc, 0x73, 0x52, 0x8b, 0x45, 0xfc, 0x8d, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xec, 0x01, 0xd0, 0x8b, 0x10, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0x89, 0xc2, 0x8b, 0x45, 0xd8, 0x89, 0xc1, 0xe8, 0x0b, 0xff, 0xff, 0xff, 0x84, 0xc0, 0x74, 0x26, 0x8b, 0x45, 0xfc, 0x8d, 0x14, 0x00, 0x8b, 0x45, 0xe8, 0x01, 0xd0, 0x0f, 0xb7, 0x00, 0x0f, 0xb7, 0xc0, 0x8d, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xe4, 0x01, 0xd0, 0x8b, 0x10, 0x8b, 0x45, 0xdc, 0x01, 0xd0, 0xeb, 0x0b, 0x83, 0x45, 0xfc, 0x01, 0xeb, 0xa3, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xc3, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x24, 0x89, 0x4d, 0xdc, 0xc7, 0x45, 0xec, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xec, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xe8, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x0c, 0x83, 0xc0, 0x14, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xf8, 0x8b, 0x00, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xe4, 0x39, 0x45, 0xf8, 0x74, 0x31, 0x8b, 0x45, 0xe4, 0x83, 0xe8, 0x08, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x18, 0x8b, 0x55, 0xdc, 0x89, 0xc1, 0xe8, 0xd1, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xf0, 0x83, 0x7d, 0xf0, 0x00, 0x74, 0x05, 0x8b, 0x45, 0xf0, 0xeb, 0x0f, 0x8b, 0x45, 0xe4, 0x8b, 0x00, 0x89, 0x45, 0xe4, 0xeb, 0xc7, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xc3, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x34, 0x89, 0x4d, 0xcc, 0xc7, 0x45, 0xec, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xec, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xe8, 0x8b, 0x50, 0x08, 0xc7, 0x45, 0xf4, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf4, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf0, 0x8b, 0x40, 0x08, 0x8b, 0x40, 0x3c, 0x01, 0xd0, 0x05, 0xf8, 0x00, 0x00, 0x00, 0x89, 0x45, 0xf8, 0xc7, 0x45, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xdc, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xdc, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xd8, 0x8b, 0x50, 0x08, 0xc7, 0x45, 0xe4, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xe4, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x8b, 0x40, 0x08, 0x8b, 0x40, 0x3c, 0x01, 0xd0, 0x0f, 0xb7, 0x40, 0x06, 0x0f, 0xb7, 0xc0, 0x39, 0x45, 0xfc, 0x0f, 0x92, 0xc0, 0x84, 0xc0, 0x74, 0x43, 0x8b, 0x55, 0xfc, 0x89, 0xd0, 0xc1, 0xe0, 0x02, 0x01, 0xd0, 0xc1, 0xe0, 0x03, 0x89, 0xc2, 0x8b, 0x45, 0xf8, 0x01, 0xd0, 0x89, 0xc1, 0x8b, 0x45, 0xcc, 0x89, 0xc2, 0xe8, 0xb6, 0xfd, 0xff, 0xff, 0x84, 0xc0, 0x74, 0x16, 0x8b, 0x55, 0xfc, 0x89, 0xd0, 0xc1, 0xe0, 0x02, 0x01, 0xd0, 0xc1, 0xe0, 0x03, 0x89, 0xc2, 0x8b, 0x45, 0xf8, 0x01, 0xd0, 0xeb, 0x0e, 0x83, 0x45, 0xfc, 0x01, 0xe9, 0x7b, 0xff, 0xff, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xc3, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x28, 0x89, 0x4d, 0xdc, 0x89, 0x55, 0xd8, 0x8b, 0x45, 0xdc, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xd8, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0x08, 0xc1, 0xe8, 0x02, 0x89, 0x45, 0xec, 0xc7, 0x45, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf4, 0x3b, 0x45, 0xec, 0x7d, 0x18, 0x8b, 0x45, 0xf8, 0x8b, 0x10, 0x8b, 0x45, 0xfc, 0x89, 0x10, 0x83, 0x45, 0xfc, 0x04, 0x83, 0x45, 0xf8, 0x04, 0x83, 0x45, 0xf4, 0x01, 0xeb, 0xe0, 0x8b, 0x45, 0x08, 0x83, 0xe0, 0x03, 0x89, 0x45, 0xec, 0xc7, 0x45, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf0, 0x3b, 0x45, 0xec, 0x7d, 0x19, 0x8b, 0x45, 0xf8, 0x0f, 0xb6, 0x10, 0x8b, 0x45, 0xfc, 0x88, 0x10, 0x83, 0x45, 0xfc, 0x01, 0x83, 0x45, 0xf8, 0x01, 0x83, 0x45, 0xf0, 0x01, 0xeb, 0xdf, 0x90, 0xc9, 0xc2, 0x04, 0x00, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x20, 0xc7, 0x45, 0xec, 0x2e, 0x74, 0x77, 0x00, 0x8d, 0x45, 0xec, 0x89, 0xc1, 0xe8, 0x96, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xfc, 0xc7, 0x45, 0xf4, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf4, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x08, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x0c, 0x01, 0xd0, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xf8, 0xc9, 0xc3, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x68, 0xc7, 0x45, 0xb5, 0x56, 0x69, 0x72, 0x74, 0xc7, 0x45, 0xb9, 0x75, 0x61, 0x6c, 0x50, 0xc7, 0x45, 0xbd, 0x72, 0x6f, 0x74, 0x65, 0x66, 0xc7, 0x45, 0xc1, 0x63, 0x74, 0xc6, 0x45, 0xc3, 0x00, 0x8d, 0x45, 0xb5, 0x89, 0xc1, 0xe8, 0xcb, 0xfd, 0xff, 0xff, 0x89, 0x45, 0xf4, 0xc7, 0x45, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xf0, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xec, 0x8b, 0x50, 0x08, 0xc7, 0x45, 0xe8, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xe8, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xe4, 0x8b, 0x40, 0x08, 0x8b, 0x40, 0x3c, 0x01, 0xd0, 0x8d, 0x50, 0x78, 0x8d, 0x45, 0xb0, 0x89, 0x44, 0x24, 0x0c, 0xc7, 0x44, 0x24, 0x08, 0x04, 0x00, 0x00, 0x00, 0xc7, 0x44, 0x24, 0x04, 0x78, 0x00, 0x00, 0x00, 0x89, 0x14, 0x24, 0x8b, 0x45, 0xf4, 0xff, 0xd0, 0x83, 0xec, 0x10, 0xe8, 0x33, 0xff, 0xff, 0xff, 0x89, 0xc1, 0xc7, 0x45, 0xe0, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xe0, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xdc, 0x8b, 0x45, 0xdc, 0x8b, 0x50, 0x08, 0xc7, 0x45, 0xd8, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xd8, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xd4, 0x8b, 0x45, 0xd4, 0x8b, 0x40, 0x08, 0x8b, 0x40, 0x3c, 0x01, 0xd0, 0x83, 0xc0, 0x78, 0xc7, 0x04, 0x24, 0x78, 0x00, 0x00, 0x00, 0x89, 0xca, 0x89, 0xc1, 0xe8, 0x6f, 0xfe, 0xff, 0xff, 0x83, 0xec, 0x04, 0x8b, 0x45, 0xb0, 0xc7, 0x45, 0xd0, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x55, 0xd0, 0x64, 0x8b, 0x12, 0x89, 0x55, 0xcc, 0x8b, 0x55, 0xcc, 0x8b, 0x4a, 0x08, 0xc7, 0x45, 0xc8, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x55, 0xc8, 0x64, 0x8b, 0x12, 0x89, 0x55, 0xc4, 0x8b, 0x55, 0xc4, 0x8b, 0x52, 0x08, 0x8b, 0x52, 0x3c, 0x01, 0xca, 0x8d, 0x4a, 0x78, 0x8d, 0x55, 0xb0, 0x89, 0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0xc7, 0x44, 0x24, 0x04, 0x78, 0x00, 0x00, 0x00, 0x89, 0x0c, 0x24, 0x8b, 0x45, 0xf4, 0xff, 0xd0, 0x83, 0xec, 0x10, 0x90, 0xc9, 0xc3, 0x55, 0x89, 0xe5, 0x53, 0x81, 0xec, 0x94, 0x00, 0x00, 0x00, 0xc7, 0x45, 0x87, 0x4c, 0x6f, 0x61, 0x64, 0xc7, 0x45, 0x8b, 0x4c, 0x69, 0x62, 0x72, 0xc7, 0x45, 0x8f, 0x61, 0x72, 0x79, 0x41, 0xc6, 0x45, 0x93, 0x00, 0x8d, 0x45, 0x87, 0x89, 0xc1, 0xe8, 0x9f, 0xfc, 0xff, 0xff, 0x89, 0x45, 0xe4, 0xc7, 0x85, 0x78, 0xff, 0xff, 0xff, 0x47, 0x65, 0x74, 0x50, 0xc7, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x72, 0x6f, 0x63, 0x41, 0xc7, 0x45, 0x80, 0x64, 0x64, 0x72, 0x65, 0x66, 0xc7, 0x45, 0x84, 0x73, 0x73, 0xc6, 0x45, 0x86, 0x00, 0x8d, 0x85, 0x78, 0xff, 0xff, 0xff, 0x89, 0xc1, 0xe8, 0x6a, 0xfc, 0xff, 0xff, 0x89, 0x45, 0xe0, 0xe8, 0x68, 0xfe, 0xff, 0xff, 0xe8, 0x23, 0xfe, 0xff, 0xff, 0x83, 0xc0, 0x08, 0x89, 0x45, 0xdc, 0x8b, 0x45, 0xdc, 0x8b, 0x40, 0x04, 0x89, 0x45, 0xd8, 0xc7, 0x45, 0xb8, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xb8, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xb4, 0x8b, 0x45, 0xb4, 0x8b, 0x50, 0x08, 0x8b, 0x45, 0xdc, 0x8b, 0x00, 0x01, 0xd0, 0x89, 0x45, 0xd4, 0x8b, 0x45, 0xd4, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x10, 0x85, 0xc0, 0x75, 0x0d, 0x8b, 0x45, 0xf4, 0x8b, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0xc7, 0x45, 0xb0, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xb0, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xac, 0x8b, 0x45, 0xac, 0x8b, 0x50, 0x08, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x0c, 0x01, 0xd0, 0x89, 0x45, 0xd0, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x10, 0x89, 0x45, 0xcc, 0x8b, 0x45, 0xf4, 0x8b, 0x00, 0x89, 0x45, 0xf0, 0x83, 0x7d, 0xf0, 0x00, 0x75, 0x09, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x10, 0x89, 0x45, 0xf0, 0xc7, 0x45, 0xa8, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xa8, 0x64, 0x8b, 0x00, 0x89, 0x45, 0xa4, 0x8b, 0x45, 0xa4, 0x8b, 0x50, 0x08, 0x8b, 0x45, 0xf0, 0x01, 0xd0, 0x89, 0x45, 0xec, 0xc7, 0x45, 0xa0, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xa0, 0x64, 0x8b, 0x00, 0x89, 0x45, 0x9c, 0x8b, 0x45, 0x9c, 0x8b, 0x50, 0x08, 0x8b, 0x45, 0xcc, 0x01, 0xd0, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xe8, 0x8b, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x8b, 0x45, 0xec, 0x8b, 0x00, 0x85, 0xc0, 0x79, 0x32, 0x8b, 0x45, 0xec, 0x8b, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc3, 0x8b, 0x45, 0xd0, 0x89, 0x04, 0x24, 0x8b, 0x45, 0xe4, 0xff, 0xd0, 0x83, 0xec, 0x04, 0x89, 0x5c, 0x24, 0x04, 0x89, 0x04, 0x24, 0x8b, 0x45, 0xe0, 0xff, 0xd0, 0x83, 0xec, 0x08, 0x89, 0x45, 0xc8, 0x8b, 0x45, 0xe8, 0x8b, 0x55, 0xc8, 0x89, 0x10, 0x8b, 0x45, 0xe8, 0x8b, 0x10, 0x8b, 0x45, 0xec, 0x8b, 0x00, 0x39, 0xc2, 0x75, 0x66, 0xc7, 0x45, 0x98, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x98, 0x64, 0x8b, 0x00, 0x89, 0x45, 0x94, 0x8b, 0x45, 0x94, 0x8b, 0x50, 0x08, 0x8b, 0x45, 0xec, 0x8b, 0x00, 0x01, 0xd0, 0x89, 0x45, 0xc4, 0x8b, 0x45, 0xec, 0x8b, 0x00, 0x85, 0xc0, 0x79, 0x07, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x53, 0x8b, 0x45, 0xc4, 0x83, 0xc0, 0x02, 0x89, 0x45, 0xc0, 0x8b, 0x45, 0xd0, 0x89, 0x04, 0x24, 0x8b, 0x45, 0xe4, 0xff, 0xd0, 0x83, 0xec, 0x04, 0x89, 0xc2, 0x8b, 0x45, 0xc0, 0x89, 0x44, 0x24, 0x04, 0x89, 0x14, 0x24, 0x8b, 0x45, 0xe0, 0xff, 0xd0, 0x83, 0xec, 0x08, 0x89, 0x45, 0xbc, 0x8b, 0x45, 0xe8, 0x8b, 0x55, 0xbc, 0x89, 0x10, 0x83, 0x45, 0xec, 0x04, 0x83, 0x45, 0xe8, 0x04, 0xe9, 0x37, 0xff, 0xff, 0xff, 0x90, 0x83, 0x45, 0xf4, 0x14, 0xe9, 0x99, 0xfe, 0xff, 0xff, 0x90, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x5d, 0xfc, 0xc9, 0xc3, 0x61, 0x64, 0x72, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x33, 0x30, 0x63, 0x6d, 0x2e, 0x74, 0x77 };
char logo[] = {
"  dP   dP                MMP\"\"\"\"\"\"\"MM          dP      \n"\
"  88   88                M' .mmmm  MM          88      \n"\
"d8888P 88d888b. .d8888b. M         `M 88d888b. 88  .dP \n"\
"  88   88'  `88 88ooood8 M  MMMMM  MM 88'  `88 88888\"  \n"\
"  88   88    88 88.  ... M  MMMMM  MM 88       88  `8b.\n"\
"  dP   dP    dP `88888P' M  MMMMM  MM dP       dP   `YP\n"\
"                         MMMMMMMMMMMM\n"
"                theArk [v1.0] by aaaddress1@chroot.org\n"
" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n\n"
};

bool readBinFile(const char fileName[], char** bufPtr, DWORD &length) {
	if (FILE* fp = fopen(fileName, "rb")) {
		fseek(fp, 0, SEEK_END);
		length = ftell(fp);
		*bufPtr = new char[length + 1];
		fseek(fp, 0, SEEK_SET);
		fread(*bufPtr, sizeof(char), length, fp);
		return true;
	}
	else return false;
}

#define getNtHdr(buf) ((IMAGE_NT_HEADERS*)((size_t)buf + ((IMAGE_DOS_HEADER *)buf)->e_lfanew ))
#define getSectionArr(buf) ((IMAGE_SECTION_HEADER *)((size_t)buf + ((IMAGE_DOS_HEADER *)buf)->e_lfanew + sizeof(IMAGE_NT_HEADERS)))
unsigned int getExeSizeByLastestSection(char* buf) {
	IMAGE_NT_HEADERS* ntHdr = getNtHdr(buf);
	IMAGE_SECTION_HEADER* sectionHdr = getSectionArr(buf);
	unsigned int currInputExeSize(
		sectionHdr[ntHdr->FileHeader.NumberOfSections - 1].PointerToRawData + \
		sectionHdr[ntHdr->FileHeader.NumberOfSections - 1].SizeOfRawData
	);
	return currInputExeSize;
}

typedef NTSTATUS(WINAPI * XRtlCompressBuffer)(USHORT CompressionFormatAndEngine, PUCHAR UncompressedBuffer, ULONG  UncompressedBufferSize, PUCHAR CompressedBuffer,
	ULONG  CompressedBufferSize, ULONG  UncompressedChunkSize, PULONG FinalCompressedSize, PVOID  WorkSpace);
typedef NTSTATUS(WINAPI * XRtlGetCompressionWorkSpaceSize)(USHORT CompressionFormatAndEngine, PULONG CompressBufferWorkSpaceSize, PULONG CompressFragmentWorkSpaceSize);

#define P2ALIGNUP(size, align) ( (((size) / (align)) + 1) * (align)  )

LPVOID compressData(LPVOID img, size_t imgSize, DWORD& outSize) {
	DWORD(WINAPI *fnRtlGetCompressionWorkSpaceSize)(USHORT, PULONG, PULONG)
		= (DWORD(WINAPI *)(USHORT, PULONG, PULONG))
		(::GetProcAddress(::GetModuleHandle(TEXT("ntdll.dll")), "RtlGetCompressionWorkSpaceSize"));

	DWORD(WINAPI *fnRtlCompressBuffer)(USHORT, PUCHAR, ULONG, PUCHAR, ULONG, ULONG, PULONG, PVOID)
		= (DWORD(WINAPI *)(USHORT, PUCHAR, ULONG, PUCHAR, ULONG, ULONG, PULONG, PVOID))
		(::GetProcAddress(::GetModuleHandle(TEXT("ntdll.dll")), "RtlCompressBuffer"));

	ULONG uCompressBufferWorkSpaceSize, uCompressFragmentWorkSpaceSize;
	if (fnRtlGetCompressionWorkSpaceSize(
		COMPRESSION_FORMAT_LZNT1,
		&uCompressBufferWorkSpaceSize,
		&uCompressFragmentWorkSpaceSize)) {
		return 0;
	}

	PUCHAR pWorkSpace = new UCHAR[uCompressBufferWorkSpaceSize];
	UCHAR *out = new UCHAR[imgSize];
	memset(out, 0, imgSize);
	if (fnRtlCompressBuffer(
		COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM,
		(PUCHAR)img,
		imgSize,
		out,
		imgSize,
		4096,
		&outSize,
		pWorkSpace))
		return 0;
	else
		return out;
}

bool dumpMappedImgBin(char*buf, BYTE* &mappedImg, size_t* imgSize) {
	PIMAGE_SECTION_HEADER stectionArr = getSectionArr(buf);
	*imgSize = getNtHdr(buf)->OptionalHeader.SizeOfImage - stectionArr[0].VirtualAddress; // start with the first section data.
	mappedImg = new BYTE[*imgSize];
	memset(mappedImg, 0, *imgSize);

	for (size_t i = 0; i < getNtHdr(buf)->FileHeader.NumberOfSections; i++)
		memcpy(mappedImg + stectionArr[i].VirtualAddress - stectionArr[0].VirtualAddress, buf + stectionArr[i].PointerToRawData, stectionArr[i].SizeOfRawData);
	return true;
}

struct packingRecord {
	IMAGE_DATA_DIRECTORY prevDataDirTable[15];
	DWORD orginalEntryPoint;
};

void linkBin(char* buf, BYTE* stub, size_t stubSize, BYTE* compressedImgData, size_t compressedDataSize) {
	WORD sizeOfOptionalHeader = getNtHdr(buf)->FileHeader.SizeOfOptionalHeader;
	DWORD sectionAlignment = getNtHdr(buf)->OptionalHeader.SectionAlignment;
	DWORD fileAlignment = getNtHdr(buf)->OptionalHeader.FileAlignment;

	// deal with the first section
	PIMAGE_SECTION_HEADER sectionArr = getSectionArr(buf);
	packingRecord* currPackingRecord = new packingRecord();
	memcpy(&(currPackingRecord->prevDataDirTable), &(getNtHdr(buf)->OptionalHeader.DataDirectory), sizeof(IMAGE_DATA_DIRECTORY) * 15);
	currPackingRecord->orginalEntryPoint = getNtHdr(buf)->OptionalHeader.AddressOfEntryPoint;
	memset(getNtHdr(buf)->OptionalHeader.DataDirectory, 0, sizeof(IMAGE_DATA_DIRECTORY) * 15);

	// -------------------------------- Mapping RWX memory section --------
	memcpy(&(sectionArr[0].Name), "adr", 8);
	sectionArr[0].Misc.VirtualSize = (getNtHdr(buf)->OptionalHeader.SizeOfImage - getNtHdr(buf)->OptionalHeader.SizeOfHeaders) * 2;
	sectionArr[0].VirtualAddress = 0x1000;
	sectionArr[0].SizeOfRawData = 0;
	sectionArr[0].PointerToRawData = 0;
	sectionArr[0].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE;

	//---------------------------------- Stub -----------------------------
	memcpy(&(sectionArr[1].Name), "have", 8);
	sectionArr[1].Misc.VirtualSize = stubSize;
	sectionArr[1].VirtualAddress = P2ALIGNUP((sectionArr[0].VirtualAddress + sectionArr[0].Misc.VirtualSize), sectionAlignment);
	sectionArr[1].SizeOfRawData = P2ALIGNUP(stubSize, fileAlignment);
	sectionArr[1].PointerToRawData = getNtHdr(buf)->OptionalHeader.SizeOfHeaders;
	sectionArr[1].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[1].PointerToRawData), stub, stubSize);
	getNtHdr(buf)->OptionalHeader.AddressOfEntryPoint = sectionArr[1].VirtualAddress;

	//---------------------------------- Compressed Data Section ----------
	memcpy(&(sectionArr[2].Name), "30cm", 8);
	sectionArr[2].Misc.VirtualSize = compressedDataSize;
	sectionArr[2].VirtualAddress = P2ALIGNUP(sectionArr[1].VirtualAddress + sectionArr[1].Misc.VirtualSize, sectionAlignment);
	sectionArr[2].SizeOfRawData = P2ALIGNUP(compressedDataSize, fileAlignment);
	sectionArr[2].PointerToRawData = sectionArr[1].PointerToRawData + sectionArr[1].SizeOfRawData;
	sectionArr[2].Characteristics = IMAGE_SCN_MEM_READ;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[2].PointerToRawData), compressedImgData, compressedDataSize);

	//---------------------------------- Packing Record -----------------------------
	memcpy(&(sectionArr[3].Name), ".tw\x00", 8);
	sectionArr[3].Misc.VirtualSize = sizeof(packingRecord);
	sectionArr[3].VirtualAddress = P2ALIGNUP(sectionArr[2].VirtualAddress + sectionArr[2].Misc.VirtualSize, sectionAlignment);
	sectionArr[3].SizeOfRawData = P2ALIGNUP(sizeof(packingRecord), fileAlignment);
	sectionArr[3].PointerToRawData = sectionArr[2].PointerToRawData + sectionArr[2].SizeOfRawData;
	sectionArr[3].Characteristics = IMAGE_SCN_MEM_READ;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[3].PointerToRawData), currPackingRecord, sizeof(packingRecord));

	//------------------------- Fix SizeOfImage for Application Loader -------------------------
	getNtHdr(buf)->OptionalHeader.DllCharacteristics &= ~(IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE);
	getNtHdr(buf)->FileHeader.NumberOfSections = 4;
	getNtHdr(buf)->OptionalHeader.SizeOfImage = \
		sectionArr[getNtHdr(buf)->FileHeader.NumberOfSections - 1].VirtualAddress + \
		sectionArr[getNtHdr(buf)->FileHeader.NumberOfSections - 1].Misc.VirtualSize;
}

int main(int argc, char** argv)
{
	printf(logo);
	if (argc != 2) {
		printf("[!] usage: %s [TARGET_PE_FILE]", strrchr(argv[0], '\\') ? strrchr(argv[0], '\\') + 1 : argv[0]);
		return 0;
	}
	// --------------------------------------------------------------------
	char* in_peFilePath = argv[1];
	char* outputFileName = new char[strlen(in_peFilePath) + 0xff];
	strcpy(outputFileName, in_peFilePath);
	strcpy(strrchr(outputFileName, '.'), "_packed.exe\x00");
	printf("[+] detect input PE file: %s\n", in_peFilePath);
	printf("    - output PE file at %s\n", outputFileName);
	char* buf; DWORD filesize;
	if (!readBinFile(in_peFilePath, &buf, filesize)) {
		puts("    - fail to read input PE binary.");
		return 0;
	}
	else puts("    - read PE file... done.");
	puts("");
	// --------------------------------------------------------------------
	printf("[+] dump dynamic image.\n");
	BYTE* mappedImg = NULL; size_t imgSize = -1;
	if (dumpMappedImgBin(buf, mappedImg, &imgSize))
		puts("    - file mapping emulating... done.");
	puts("");
	// --------------------------------------------------------------------
	printf("[+] dump dynamic image.\n");
	DWORD zipedSize = -1;
	BYTE* compressImg = (BYTE*)compressData(mappedImg, imgSize, zipedSize);
	if (compressImg)
		puts("    - compressing image... done.");
	else
		puts("    - fail to do compress.");
	puts("");
	// --------------------------------------------------------------------
	printf("[+] linking & repack whole PE file. \n");
	size_t newSectionSize = P2ALIGNUP(sizeof(x86_Stub), getNtHdr(buf)->OptionalHeader.FileAlignment);
	char* newOutBuf = new char[filesize + newSectionSize];
	memcpy(newOutBuf, buf, filesize);
	linkBin(newOutBuf, x86_Stub, sizeof(x86_Stub), compressImg, zipedSize);

	size_t finallySize = getSectionArr(newOutBuf)[getNtHdr(newOutBuf)->FileHeader.NumberOfSections - 1].PointerToRawData + \
		getSectionArr(newOutBuf)[getNtHdr(newOutBuf)->FileHeader.NumberOfSections - 1].SizeOfRawData;
	puts("");

	// --------------------------------------------------------------------
	printf("[+] generating finally packed PE file.\n");
	fwrite(newOutBuf, sizeof(char), finallySize, fopen(outputFileName, "wb"));
	printf("[+] output PE file saved as %s\n", outputFileName);
	puts("[+] done.");
}

